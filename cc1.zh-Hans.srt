1
00:00:05,759 --> 00:00:13,120
让我们开始吧。 欢迎大家来到

2
00:00:09,760 --> 00:00:14,880
Cloud Code 最佳实践。 在本次演讲中，

3
00:00:13,120 --> 00:00:17,199
我将从

4
00:00:14,880 --> 00:00:19,439
高层次讨论云代码是什么。 然后，

5
00:00:17,199 --> 00:00:21,439
我们将稍微深入

6
00:00:19,439 --> 00:00:23,840
了解一下云代码的

7
00:00:21,439 --> 00:00:25,199
工作原理。 然后了解这一点，因为

8
00:00:23,840 --> 00:00:26,800
了解工具如何工作很有用

9
00:00:25,199 --> 00:00:29,519
。 我们将讨论

10
00:00:26,800 --> 00:00:32,160
云代码的良好用例以及

11
00:00:29,519 --> 00:00:35,600
我们在

12
00:00:32,160 --> 00:00:38,000
内部和从用户那里找到的最佳实践，以

13
00:00:35,600 --> 00:00:39,360
充分利用此工具。 呃，

14
00:00:38,000 --> 00:00:41,200
但在开始之前，我想先

15
00:00:39,360 --> 00:00:43,040
简单介绍一下自己，并谈谈

16
00:00:41,200 --> 00:00:46,160
我是如何登上这个舞台的。

17
00:00:43,040 --> 00:00:48,640
我叫卡尔，

18
00:00:46,160 --> 00:00:51,520
大约一年半前加入 Enthropic，帮助

19
00:00:48,640 --> 00:00:53,920
组建一个我们称之为应用人工智能的团队。

20
00:00:51,520 --> 00:00:55,520
这是应用人工智能的使命，

21
00:00:53,920 --> 00:00:57,760
我们团队的使命是帮助我们的

22
00:00:55,520 --> 00:01:00,000
客户和合作伙伴

23
00:00:57,760 --> 00:01:02,079
在 Claude 之上构建出色的产品和功能。

24
00:01:00,000 --> 00:01:05,040
所以这实际上意味着我

25
00:01:02,079 --> 00:01:07,439
每天花很多时间提示 Claude

26
00:01:05,040 --> 00:01:10,400
从这些模型中获得绝对最佳的输出

27
00:01:07,439 --> 00:01:11,840
。 话虽如此，我也喜欢编码，

28
00:01:10,400 --> 00:01:14,400
而且我绝对是那些

29
00:01:11,840 --> 00:01:16,080
喜欢开始很多项目，有

30
00:01:14,400 --> 00:01:17,600
一些疯狂的想法，然后永远无法

31
00:01:16,080 --> 00:01:20,000
完成它们的程序员之一。 所以，我有一个

32
00:01:17,600 --> 00:01:21,600
像我开始但从未

33
00:01:20,000 --> 00:01:23,759
真正完成的代码的墓地。 嗯，但我总是在

34
00:01:21,600 --> 00:01:25,520
创造新的东西。 去年

35
00:01:23,759 --> 00:01:27,280
年底，我在 Slack 上听说了

36
00:01:25,520 --> 00:01:28,479
一些人正在使用这个新工具

37
00:01:27,280 --> 00:01:30,799
。 他们说这

38
00:01:28,479 --> 00:01:32,720
真的很酷。 因此，在一个星期五的晚上，

39
00:01:30,799 --> 00:01:35,040
我下载了后来成为

40
00:01:32,720 --> 00:01:36,720
Cloud Code 的工具。 我把它投入到

41
00:01:35,040 --> 00:01:39,360
我想构建的这种新型笔记应用程序中

42
00:01:36,720 --> 00:01:41,520
。 整个周末

43
00:01:39,360 --> 00:01:42,799
彻底改变了我编写

44
00:01:41,520 --> 00:01:44,880
代码和思考软件

45
00:01:42,799 --> 00:01:46,880
工程的方式。 我

46
00:01:44,880 --> 00:01:48,880
整个周末都随身带着笔记本电脑。 我非常

47
00:01:46,880 --> 00:01:51,360
沉迷于观看克劳德代码的

48
00:01:48,880 --> 00:01:53,119
运行，我会按下回车键，然后

49
00:01:51,360 --> 00:01:55,439
切换到我的浏览器并刷新，

50
00:01:53,119 --> 00:01:57,520
然后我就会看着这个强大的

51
00:01:55,439 --> 00:02:00,000
应用程序在我眼前组合在一起

52
00:01:57,520 --> 00:02:01,520
。 我在这

53
00:02:00,000 --> 00:02:04,719
件事上取得的进展比我自己单独做时取得的进展要大得多。

54
00:02:01,520 --> 00:02:05,759
这让我大吃一惊。 当我

55
00:02:04,719 --> 00:02:07,520
这样做的时候，我有点担心。

56
00:02:05,759 --> 00:02:08,640
我当时想，你知道，我

57
00:02:07,520 --> 00:02:10,800
大概知道这些东西是如何运作的。 所以我

58
00:02:08,640 --> 00:02:12,400
想，伙计，我使用了很多代币。 我

59
00:02:10,800 --> 00:02:13,760
希望我不会遇到麻烦或者引起任何人的

60
00:02:12,400 --> 00:02:16,400
注意。 我实际上并没有为人择准则

61
00:02:13,760 --> 00:02:18,000
做出贡献。 嗯，但

62
00:02:16,400 --> 00:02:20,720
我不知道的是，克劳德

63
00:02:18,000 --> 00:02:23,200
代码团队已经建立了这个内部

64
00:02:20,720 --> 00:02:25,120
排行榜，追踪所有

65
00:02:23,200 --> 00:02:27,599
人类员工使用它的频率。 而

66
00:02:25,120 --> 00:02:29,840
周末，我已经跃居榜首。

67
00:02:27,599 --> 00:02:31,840
通过这种方式，我认识了 Boris

68
00:02:29,840 --> 00:02:34,160
、Cat 和一些早期的云代码

69
00:02:31,840 --> 00:02:36,640
团队成员。 然后我就可以开始和

70
00:02:34,160 --> 00:02:38,560
他们交谈了，说：“嘿，我喜欢这个工具。我

71
00:02:36,640 --> 00:02:41,280
对提示也很了解。我能帮

72
00:02:38,560 --> 00:02:43,200
你们吗？” 因此，我

73
00:02:41,280 --> 00:02:45,760
参与其中，现在我是

74
00:02:43,200 --> 00:02:48,080
团队的核心贡献者之一，我做了很多工作，我做了

75
00:02:45,760 --> 00:02:49,920
很多工作，提示

76
00:02:48,080 --> 00:02:52,239
系统提示工具如何工作，

77
00:02:49,920 --> 00:02:54,720
工具描述和工具结果，

78
00:02:52,239 --> 00:02:56,319
以及我如何评估这个

79
00:02:54,720 --> 00:02:57,840
工具。 因此，当我们考虑改变

80
00:02:56,319 --> 00:03:00,239
提示时，我们如何

81
00:02:57,840 --> 00:03:02,640
知道我们使事情变得更好或相同，

82
00:03:00,239 --> 00:03:05,440
并且我们并没有完全破坏云代码。

83
00:03:02,640 --> 00:03:07,840
那么，让我们开始深入探讨吧。

84
00:03:05,440 --> 00:03:09,680
这是我目前对克劳德密码的心理模型，

85
00:03:07,840 --> 00:03:12,959
以及

86
00:03:09,680 --> 00:03:15,599
当人们问我时我如何向人们描述它。

87
00:03:12,959 --> 00:03:17,599
克劳德·科德 (Claude Code) 就像那位

88
00:03:15,599 --> 00:03:18,959
在终端上完成所有事情的同事。

89
00:03:17,599 --> 00:03:21,599
这种人从来不会

90
00:03:18,959 --> 00:03:23,840
触碰别人。 他们真是天才。 我

91
00:03:21,599 --> 00:03:25,519
想起当我还是一名初级工程师的时候，我

92
00:03:23,840 --> 00:03:27,760
有一位导师，我走到

93
00:03:25,519 --> 00:03:29,200
他的办公桌前说：“嘿，托尼，

94
00:03:27,760 --> 00:03:31,280
你能帮我解决这个问题吗？” 他

95
00:03:29,200 --> 00:03:33,120
会快速打开他的终端，然后

96
00:03:31,280 --> 00:03:34,640
运行所有这些疯狂的 bash

97
00:03:33,120 --> 00:03:36,159
命令并在 Vim 中改变一些东西，

98
00:03:34,640 --> 00:03:38,560
我总是会想，

99
00:03:36,159 --> 00:03:42,400
“哇，这太疯狂了。我应该学会怎么

100
00:03:38,560 --> 00:03:44,640
做。” 嗯，我从来没有这样做过。 但是在

101
00:03:42,400 --> 00:03:46,560
你的计算机上安装《克劳德密码》就好

102
00:03:44,640 --> 00:03:49,560
比托尼一直在你身边一样

103
00:03:46,560 --> 00:03:49,560
。

104
00:03:49,760 --> 00:03:57,040
那么，Claude 代码

105
00:03:52,640 --> 00:03:59,840
在底层是如何工作的呢？ 在 Anthropic，我们

106
00:03:57,040 --> 00:04:01,920
总是尝试去做那些简单

107
00:03:59,840 --> 00:04:03,920
却有效的事情。 对于

108
00:04:01,920 --> 00:04:06,959
Cloud Code 来说，这意味着我们

109
00:04:03,920 --> 00:04:09,120
认为它是一个非常纯粹的代理。

110
00:04:06,959 --> 00:04:11,439
当我们谈论人择代理时，

111
00:04:09,120 --> 00:04:14,560
我们真正的意思是一些

112
00:04:11,439 --> 00:04:16,400
指令、一些强大的工具，然后

113
00:04:14,560 --> 00:04:18,880
让模型循环运行，

114
00:04:16,400 --> 00:04:21,199
直到它决定完成为止。 这就是

115
00:04:18,880 --> 00:04:24,080
Cloud Code 的真正含义。 所以它是

116
00:04:21,199 --> 00:04:25,840
工具，强大的工具，

117
00:04:24,080 --> 00:04:27,440
你知道那些真正

118
00:04:25,840 --> 00:04:29,919
擅长使用终端的人将能够使用

119
00:04:27,440 --> 00:04:31,520
工具来创建和编辑文件以使用

120
00:04:29,919 --> 00:04:33,520
终端。 然后您还可以使用 MCP 执行

121
00:04:31,520 --> 00:04:35,199
诸如引入其他事物之类的操作

122
00:04:33,520 --> 00:04:39,040
。

123
00:04:35,199 --> 00:04:41,120
现在，最重要的是，Claude 如何

124
00:04:39,040 --> 00:04:43,280
理解代码库。 如果你

125
00:04:41,120 --> 00:04:46,000
要在一年前构建一个编码代理或

126
00:04:43,280 --> 00:04:47,680
编码工具，你可能

127
00:04:46,000 --> 00:04:50,479
会有这样的想法，好吧，我将

128
00:04:47,680 --> 00:04:51,919
获得有关

129
00:04:50,479 --> 00:04:53,520
此代码库的一些用户消息，我需要

130
00:04:51,919 --> 00:04:55,759
弄清楚哪些文件是相关的。 所以

131
00:04:53,520 --> 00:04:58,160
也许我会喜欢索引整个代码库

132
00:04:55,759 --> 00:05:01,360
并将其嵌入，然后执行这种

133
00:04:58,160 --> 00:05:03,120
类似于抹布检索的奇特操作。

134
00:05:01,360 --> 00:05:06,320
云代码的工作方式并非如此。 我们不做任何类型

135
00:05:03,120 --> 00:05:09,120
的索引。 相反，克劳德会

136
00:05:06,320 --> 00:05:10,960
探索并理解代码库。

137
00:05:09,120 --> 00:05:12,560
如果您是团队新人，对

138
00:05:10,960 --> 00:05:14,720
代码库也是新人，那么您会如何探索

139
00:05:12,560 --> 00:05:16,960
代码库呢？通过基因

140
00:05:14,720 --> 00:05:19,120
搜索，

141
00:05:16,960 --> 00:05:21,600
您会使用到和 glob、

142
00:05:19,120 --> 00:05:23,919
gp 以及 find 等搜索工具相同的方法，基因搜索可以

143
00:05:21,600 --> 00:05:26,320
遍历代码库，了解正在

144
00:05:23,919 --> 00:05:27,919
发生的事情。我们所说的基因

145
00:05:26,320 --> 00:05:30,160
搜索实际上意味着模型可以

146
00:05:27,919 --> 00:05:32,720
进行一些搜索，然后查看

147
00:05:30,160 --> 00:05:34,080
结果，并说“嗯，也许我

148
00:05:32,720 --> 00:05:35,360
需要弄清楚更多的事情，我

149
00:05:34,080 --> 00:05:37,759
将进行更多搜索，

150
00:05:35,360 --> 00:05:39,919
然后返回，

151
00:05:37,759 --> 00:05:41,840
并基于这些原语”。

152
00:05:39,919 --> 00:05:44,800
除了这个代理之外，我们还有一些东西。

153
00:05:41,840 --> 00:05:46,800
我们有一个非常好的轻量级 UI 层，

154
00:05:44,800 --> 00:05:49,280
您可以在其中观看 Claude 代码的工作。 您会

155
00:05:46,800 --> 00:05:51,919
看到所有文本飞过，我们有一个

156
00:05:49,280 --> 00:05:54,160
很好的许可系统，允许

157
00:05:51,919 --> 00:05:55,919
代理工作，并允许并在

158
00:05:54,160 --> 00:05:58,400

159
00:05:55,919 --> 00:06:00,320
代理执行危险操作时强制人类介入。

160
00:05:58,400 --> 00:06:02,639
除此之外，我们还非常关心

161
00:06:00,320 --> 00:06:04,479
这个工具的安全性。 因此，

162
00:06:02,639 --> 00:06:07,840
由于四元代码只是

163
00:06:04,479 --> 00:06:09,840

164
00:06:07,840 --> 00:06:12,160
模型之上的一种轻量级层，而且我们的模型

165
00:06:09,840 --> 00:06:15,120
不仅适用于人择 API，

166
00:06:12,160 --> 00:06:18,240
还适用于我们的云提供商 AWS

167
00:06:15,120 --> 00:06:19,919
和 GCP，因此，

168
00:06:18,240 --> 00:06:22,080

169
00:06:19,919 --> 00:06:26,080
如果您觉得以

170
00:06:22,080 --> 00:06:29,120
这种方式使用云更舒服，那么将云代码指向这些其他服务之一是非常容易和原生的。

171
00:06:26,080 --> 00:06:30,880
现在很多人问我，嘿卡尔，

172
00:06:29,120 --> 00:06:33,759
我可以使用云代码做什么？

173
00:06:30,880 --> 00:06:36,479
它擅长什么？ 哪里有趣？

174
00:06:33,759 --> 00:06:38,240
事实上，它在

175
00:06:36,479 --> 00:06:41,120
各方面都表现得非常出色。

176
00:06:38,240 --> 00:06:44,160
那么让我们从发现开始吧。

177
00:06:41,120 --> 00:06:45,759
在你的职业生涯中，你经常会被

178
00:06:44,160 --> 00:06:47,280
派往一个新的代码库。

179
00:06:45,759 --> 00:06:48,960
这是否意味着你要换团队，

180
00:06:47,280 --> 00:06:50,240
换公司，我不

181
00:06:48,960 --> 00:06:52,240
知道，你开始从事

182
00:06:50,240 --> 00:06:53,440
某种开源项目。 并且

183
00:06:52,240 --> 00:06:54,800
可能当您刚

184
00:06:53,440 --> 00:06:55,919
开始熟悉时，您的

185
00:06:54,800 --> 00:06:57,840
效率不会很高，因为您只是

186
00:06:55,919 --> 00:06:59,680
试图弄清楚代码库中的东西在哪里

187
00:06:57,840 --> 00:07:01,680
，团队正在使用什么样的模式

188
00:06:59,680 --> 00:07:04,080
，诸如此类的事情。 而

189
00:07:01,680 --> 00:07:06,560
Claude 代码可以帮助增强

190
00:07:04,080 --> 00:07:08,479
这一入职流程。 你可以问

191
00:07:06,560 --> 00:07:10,720
克劳德，嘿，这个功能在哪里

192
00:07:08,479 --> 00:07:12,560
实现的？ 或者因为它在

193
00:07:10,720 --> 00:07:14,160
终端上很棒，你可以说，嘿，看看这个

194
00:07:12,560 --> 00:07:16,000
文件，看看 git 历史记录，

195
00:07:14,160 --> 00:07:17,680
然后告诉我

196
00:07:16,000 --> 00:07:20,400
这个代码在过去几周内是如何变化的故事

197
00:07:17,680 --> 00:07:22,000
。

198
00:07:20,400 --> 00:07:24,000
您可以使用云代码来做一件事，

199
00:07:22,000 --> 00:07:25,840
我认为这被低估了，那就是您

200
00:07:24,000 --> 00:07:27,599
不仅可以深入研究并开始

201
00:07:25,840 --> 00:07:29,759
工作，还可以将云代码用作

202
00:07:27,599 --> 00:07:31,680
思想伙伴。 所以很多时候，当

203
00:07:29,759 --> 00:07:33,280
我和 Claude 一起工作，想要

204
00:07:31,680 --> 00:07:34,960
实现一个功能或者

205
00:07:33,280 --> 00:07:37,199
修改一些东西时，我会打开 Claude

206
00:07:34,960 --> 00:07:38,400
，说：“嘿，Claude，你知道，我正在

207
00:07:37,199 --> 00:07:40,000
考虑实现这个

208
00:07:38,400 --> 00:07:41,759
功能，你能不能帮我

209
00:07:40,000 --> 00:07:43,280
搜索一下，看看

210
00:07:41,759 --> 00:07:44,639
我们该怎么做，然后汇报一下

211
00:07:43,280 --> 00:07:47,039
两三个不同的

212
00:07:44,639 --> 00:07:48,560
方案。先别开始动手，先别

213
00:07:47,039 --> 00:07:50,960
写任何

214
00:07:48,560 --> 00:07:52,800
文件，Claude 会先用

215
00:07:50,960 --> 00:07:55,599
这些代理搜索功能，然后

216
00:07:52,800 --> 00:07:56,800
带回一些想法，然后我就

217
00:07:55,599 --> 00:07:58,720
可以和 Claude 一起

218
00:07:56,800 --> 00:08:01,039
验证一下，然后我们就可以

219
00:07:58,720 --> 00:08:02,879
开始项目了。

220
00:08:01,039 --> 00:08:04,800
当然，Cloud Code 非常擅长

221
00:08:02,879 --> 00:08:07,039
构建和编写代码，我想从

222
00:08:04,800 --> 00:08:09,199
两个方面来说。首先，

223
00:08:07,039 --> 00:08:10,960
它可以完成从零到一的工作，

224
00:08:09,199 --> 00:08:12,800
你可以把它放在一个空目录中，然后

225
00:08:10,960 --> 00:08:15,039
你说，‘嘿，帮我开发一个应用程序，或者帮我开发一个可以

226
00:08:12,800 --> 00:08:16,400
演示的游戏，这

227
00:08:15,039 --> 00:08:19,199
很有趣，也很有

228
00:08:16,400 --> 00:08:21,280
成就感。’当然，实际上，

229
00:08:19,199 --> 00:08:23,599
真正重要的是 Cloud Code 能否

230
00:08:21,280 --> 00:08:28,080
在现有的环境中良好地运行。” 代码库。这

231
00:08:23,599 --> 00:08:30,639
是我们主要关注的。嗯，在

232
00:08:28,080 --> 00:08:32,959
Cloud Code 团队，我们的

233
00:08:30,639 --> 00:08:35,599
代码库拥有异常高的

234
00:08:32,959 --> 00:08:39,200
单元测试覆盖率。这是因为

235
00:08:35,599 --> 00:08:41,760
Cloud Code 使得

236
00:08:39,200 --> 00:08:43,360
添加单元测试变得如此简单直接。所以，

237
00:08:41,760 --> 00:08:44,880
我们的代码覆盖率很高。此外，

238
00:08:43,360 --> 00:08:46,399
我们

239
00:08:44,880 --> 00:08:48,880
自己的代码库中 Cloud Code 的另一个优势是，我们拥有丰富的

240
00:08:46,399 --> 00:08:50,480
提交和 PR 消息，因为当我们

241
00:08:48,880 --> 00:08:51,920
完成工作后，只需说“嘿，Cloud，帮我

242
00:08:50,480 --> 00:08:54,240
写提交，帮我写 PR

243
00:08:51,920 --> 00:08:56,959
消息”。

244
00:08:54,240 --> 00:08:59,360
我们也看到了

245
00:08:56,959 --> 00:09:02,080
在部署（

246
00:08:59,360 --> 00:09:04,160
例如，部署）和

247
00:09:02,080 --> 00:09:05,680
生命周期的其他部分使用 Cloud Code 的绝佳机会。其他

248
00:09:04,160 --> 00:09:08,880
人也谈到了这一点，但这里指的

249
00:09:05,680 --> 00:09:11,279
是使用 Cloud Code SDK。这样就可以

250
00:09:08,880 --> 00:09:14,800
无头地使用它，以编程方式使用它，

251
00:09:11,279 --> 00:09:17,279
能够在

252
00:09:14,800 --> 00:09:19,839
任何地方添加编码代理。例如，将

253
00:09:17,279 --> 00:09:23,120
它添加到 CI/CD 中，以便

254
00:09:19,839 --> 00:09:24,800
在 GitHub 中使用它，帮助人们以

255
00:09:23,120 --> 00:09:26,959
编程方式进行开发。

256
00:09:24,800 --> 00:09:28,720
最后，它拥有出色的

257
00:09:26,959 --> 00:09:31,360
支持和扩展能力。它可以帮助您

258
00:09:28,720 --> 00:09:33,680
更快地调试错误。我们看到的一件事

259
00:09:31,360 --> 00:09:35,519
是 我们开始向客户提供云代码

260
00:09:33,680 --> 00:09:37,279
并与他们讨论，

261
00:09:35,519 --> 00:09:39,440
我们并没有完全预料到很多

262
00:09:37,279 --> 00:09:41,200
客户或潜在客户会

263
00:09:39,440 --> 00:09:42,720
说，“嘿，我们一直在

264
00:09:41,200 --> 00:09:44,959
推迟这种大型

265
00:09:42,720 --> 00:09:47,440
代码库迁移。 使用

266
00:09:44,959 --> 00:09:50,080
旧版本 Java 的用户正在尝试使用

267
00:09:47,440 --> 00:09:51,200
新版本，或者使用 PHP 的团队

268
00:09:50,080 --> 00:09:52,880
正在尝试使用 React 或

269
00:09:51,200 --> 00:09:55,440
Angular。 我们已经与多个这样的团队进行了交谈，

270
00:09:52,880 --> 00:09:57,839
拥有像 Cloud Code 这样的工具

271
00:09:55,440 --> 00:09:59,360
可以让这样的项目

272
00:09:57,839 --> 00:10:00,480
更容易理解。 当你对你的

273
00:09:59,360 --> 00:10:02,640
团队说：“嘿，我们要花

274
00:10:00,480 --> 00:10:06,720
一个月的时间来重构或

275
00:10:02,640 --> 00:10:08,480
重写大部分代码库。”

276
00:10:06,720 --> 00:10:10,800
除此之外，

277
00:10:08,480 --> 00:10:12,959
所有这些事情中最重要的一点就是，

278
00:10:10,800 --> 00:10:14,560
再次记住克劳德在

279
00:10:12,959 --> 00:10:16,880
终端方面非常出色。 这意味着它将非常适合

280
00:10:14,560 --> 00:10:18,959
所有不同的 CLI

281
00:10:16,880 --> 00:10:21,440
工具，例如 Git、Docker、Big

282
00:10:18,959 --> 00:10:22,880
Query 等。 我永远不必

283
00:10:21,440 --> 00:10:24,880
担心，哦，我要让

284
00:10:22,880 --> 00:10:27,440
自己摆脱这种

285
00:10:24,880 --> 00:10:29,040
粘性变基？ 我只需启动云

286
00:10:27,440 --> 00:10:30,640
代码并告诉它情况，然后

287
00:10:29,040 --> 00:10:33,279
说，“嘿，你能帮我解决这个问题吗？”

288
00:10:30,640 --> 00:10:37,040
这真是令人难以置信。

289
00:10:33,279 --> 00:10:39,279
现在，让我们来讨论最佳实践。

290
00:10:37,040 --> 00:10:41,680
第一个并不会让人感到

291
00:10:39,279 --> 00:10:45,040
惊讶，但是第一个是使用

292
00:10:41,680 --> 00:10:47,600
claw.md 文件。 所以，请记住，

293
00:10:45,040 --> 00:10:49,680
就像我说的，云代码是一个代理，它

294
00:10:47,600 --> 00:10:51,600
有一些工具，

295
00:10:49,680 --> 00:10:54,000
在提示中有一些轻量级指令，但它

296
00:10:51,600 --> 00:10:56,880
实际上没有内存。 因此，

297
00:10:54,000 --> 00:10:59,519

298
00:10:56,880 --> 00:11:01,839
当我们

299
00:10:59,519 --> 00:11:04,640
在同一个代码库中反复启动 cla 代码时，我们在各种会话或团队之间共享状态的主要方式

300
00:11:01,839 --> 00:11:07,440
就是这个 cloud.mmd 文件。

301
00:11:04,640 --> 00:11:09,519
因此，当我们启动 cla 时，如果

302
00:11:07,440 --> 00:11:11,440
工作目录中有这个 claw.md 文件，

303
00:11:09,519 --> 00:11:13,120
它就会被放入

304
00:11:11,440 --> 00:11:15,200
上下文中。 它被放入提示中。

305
00:11:13,120 --> 00:11:16,640
基本上它说的是嘿克劳德，

306
00:11:15,200 --> 00:11:18,959
顺便说一下，这些是

307
00:11:16,640 --> 00:11:21,680
开发人员给你留下的重要说明。

308
00:11:18,959 --> 00:11:23,279
一定要高度重视这一点。

309
00:11:21,680 --> 00:11:25,200
您可以将 cloudmd 文件放在多个位置

310
00:11:23,279 --> 00:11:27,200
。 您可以将其放入

311
00:11:25,200 --> 00:11:29,040
项目中并签入，以便所有

312
00:11:27,200 --> 00:11:30,560
队友共享它。

313
00:11:29,040 --> 00:11:32,079
如果

314
00:11:30,560 --> 00:11:33,680
您希望 Claude 始终了解某些事情，

315
00:11:32,079 --> 00:11:35,760
无论您正在处理什么，都可以将其放在您的主目录中

316
00:11:33,680 --> 00:11:38,399
。 您在这里输入的内容是

317
00:11:35,760 --> 00:11:40,959
这样的，嘿，顺便说一下，也许这

318
00:11:38,399 --> 00:11:42,320
就是您运行单元测试的方式。 或者只是

319
00:11:40,959 --> 00:11:44,399
为了让您知道，为了让您的

320
00:11:42,320 --> 00:11:46,320
搜索和生活更轻松，这里

321
00:11:44,399 --> 00:11:48,079
就像是

322
00:11:46,320 --> 00:11:50,320
这个项目的布局方式、

323
00:11:48,079 --> 00:11:52,399
测试所在位置、有哪些不同的模块

324
00:11:50,320 --> 00:11:54,480
等的概述。 或者这是我们的风格

325
00:11:52,399 --> 00:11:56,720
指南。 诸如此类的事情

326
00:11:54,480 --> 00:11:58,480
只是为了让克劳德的生活变得更轻松一些。

327
00:11:56,720 --> 00:12:01,440
而且你可以随着时间的推移建立这些东西

328
00:11:58,480 --> 00:12:02,959
。

329
00:12:01,440 --> 00:12:05,040
您可以做的另一件

330
00:12:02,959 --> 00:12:06,800
重要的事情是权限管理。

331
00:12:05,040 --> 00:12:08,000
当您运行 Cloud Code 时，会出现

332
00:12:06,800 --> 00:12:10,399
各种不同类型的

333
00:12:08,000 --> 00:12:12,320
权限问题。 有点

334
00:12:10,399 --> 00:12:15,120
开箱即用，当您启动

335
00:12:12,320 --> 00:12:17,760
我们的工具时发生的事情是读取操作。 如果克劳德

336
00:12:15,120 --> 00:12:20,800
正在搜索或阅读，我们就

337
00:12:17,760 --> 00:12:22,480
放手。 但是一旦它开始编写或

338
00:12:20,800 --> 00:12:25,120
运行 bash 命令或执行

339
00:12:22,480 --> 00:12:27,279
可能更改您的机器上的内容的

340
00:12:25,120 --> 00:12:29,360
操作，那时我们就会

341
00:12:27,279 --> 00:12:33,680
启动这个 UI，它会说

342
00:12:29,360 --> 00:12:36,160
是，是的，总是允许这个或不，嗯，我

343
00:12:33,680 --> 00:12:38,000
想做点别的。 并且使用

344
00:12:36,160 --> 00:12:40,480
权限管理并

345
00:12:38,000 --> 00:12:42,399
明智地使用它可以帮助您更快地工作。

346
00:12:40,480 --> 00:12:44,079
因此，有一种称为自动接受

347
00:12:42,399 --> 00:12:46,480
模式的东西，如果您正在使用云

348
00:12:44,079 --> 00:12:48,399
代码并按下 Shift Tab，Claude

349
00:12:46,480 --> 00:12:50,560
就会开始工作。

350
00:12:48,399 --> 00:12:53,040
您可以做一些事情，比如您可以

351
00:12:50,560 --> 00:12:55,600
在设置中配置 claude，其中特定的命令（

352
00:12:53,040 --> 00:12:58,959
例如在 bash 上）比如如果您

353
00:12:55,600 --> 00:13:00,720
厌倦了说是运行 npm 运行测试，您

354
00:12:58,959 --> 00:13:02,720
可以随时批准它。 因此，

355
00:13:00,720 --> 00:13:04,480
调整权限管理

356
00:13:02,720 --> 00:13:06,320
是加快

357
00:13:04,480 --> 00:13:09,040
工作流

358
00:13:06,320 --> 00:13:10,639
集成设置的一种好方法。 因此，有一件事

359
00:13:09,040 --> 00:13:12,720
可以帮助您充分利用

360
00:13:10,639 --> 00:13:14,320
云代码，那就是记住它

361
00:13:12,720 --> 00:13:16,959
在终端上非常棒。 如果

362
00:13:14,320 --> 00:13:19,279
您使用的应用程序可以

363
00:13:16,959 --> 00:13:21,040
通过 CLI

364
00:13:19,279 --> 00:13:23,839
和 GitHub 进行访问，就是一个很好的例子。

365
00:13:21,040 --> 00:13:26,399
他们有一个强大的工具叫做 GH，您

366
00:13:23,839 --> 00:13:28,880
基本上可以将更多的工作交给云

367
00:13:26,399 --> 00:13:31,920
代码，您可以通过

368
00:13:28,880 --> 00:13:35,600
安装更多的 CLI 工具或

369
00:13:31,920 --> 00:13:37,440
连接更多的 MCP 服务器来实现这一点。 嗯，

370
00:13:35,600 --> 00:13:40,240
根据我的经验，如果您正在

371
00:13:37,440 --> 00:13:42,399
使用类似 um 之类的工具，这种工具

372
00:13:40,240 --> 00:13:44,000
是众所周知且有详细文档的，

373
00:13:42,399 --> 00:13:46,079
并且您正在尝试在

374
00:13:44,000 --> 00:13:49,200
CLI 工具和将其安装在您的

375
00:13:46,079 --> 00:13:52,320
机器上并获取 MCP 服务器之间进行选择，我

376
00:13:49,200 --> 00:13:54,880
建议使用 CLI 工具。 嗯，

377
00:13:52,320 --> 00:13:57,519
然后如果您

378
00:13:54,880 --> 00:13:58,959
在 Anthropic 内部有自己的工具，我们有

379
00:13:57,519 --> 00:14:01,279
一种称为 coup 的东西，可以

380
00:13:58,959 --> 00:14:03,120
为我们做很多事情。 您还可以告诉

381
00:14:01,279 --> 00:14:06,240
Claude 这一点，您

382
00:14:03,120 --> 00:14:08,639
可以将其放入 claude.mmd 中

383
00:14:06,240 --> 00:14:11,600
，然后进行上下文管理。 所以请记住，

384
00:14:08,639 --> 00:14:13,680
克劳德是一个代理，当它是一个

385
00:14:11,600 --> 00:14:16,160
代理时，它所做的就是调用这些

386
00:14:13,680 --> 00:14:18,639
工具，并且上下文会

387
00:14:16,160 --> 00:14:20,880
随着时间的推移而不断建立，至少对于人择来说，我们的

388
00:14:18,639 --> 00:14:23,120
模型有一个 200,000 个令牌的上下文窗口，

389
00:14:20,880 --> 00:14:25,199
你可以最大化这个东西。

390
00:14:23,120 --> 00:14:27,120
因此，当

391
00:14:25,199 --> 00:14:28,639
您与克劳德进行长时间的会谈

392
00:14:27,120 --> 00:14:30,720
并且来回工作时，您有两种选择

393
00:14:28,639 --> 00:14:32,079
。 您将在右下角看到

394
00:14:30,720 --> 00:14:33,760
这个小警告，

395
00:14:32,079 --> 00:14:35,600
它会说嘿，您开始

396
00:14:33,760 --> 00:14:37,040
填充上下文窗口，并且

397
00:14:35,600 --> 00:14:39,519
根据正在发生的事情，您有

398
00:14:37,040 --> 00:14:40,959
两个选择。 您可以运行 slashcle 并

399
00:14:39,519 --> 00:14:43,120
重新开始，这样可以清除除

400
00:14:40,959 --> 00:14:46,639

401
00:14:43,120 --> 00:14:48,399
claw.mmd 之外的所有内容，或者您可以运行 slash compact

402
00:14:46,639 --> 00:14:51,279
，基本上

403
00:14:48,399 --> 00:14:53,120
就像插入了一条用户消息，它

404
00:14:51,279 --> 00:14:55,279
只是说嘿，我需要

405
00:14:53,120 --> 00:14:56,880
总结一下我们一直在做的所有事情

406
00:14:55,279 --> 00:14:58,079
。 我将把它交给另一个

407
00:14:56,880 --> 00:15:00,399
开发人员，他们将从

408
00:14:58,079 --> 00:15:02,399
我离开的地方继续工作。 然后总结一下

409
00:15:00,399 --> 00:15:04,240
下一场会议的种子是什么样的。

410
00:15:02,399 --> 00:15:06,160
你可以从那里出发。 我们花费大量

411
00:15:04,240 --> 00:15:08,720
时间来调整这种紧凑

412
00:15:06,160 --> 00:15:10,959
功能，以便当您最大化

413
00:15:08,720 --> 00:15:14,959
上下文窗口然后运行紧凑时，您

414
00:15:10,959 --> 00:15:16,480
可以重新开始并继续

415
00:15:14,959 --> 00:15:18,480
高效的工作流程。 您可以

416
00:15:16,480 --> 00:15:21,440
使用云代码做什么？ 怎样才能获得

417
00:15:18,480 --> 00:15:23,360
最大收益？ 因此使用计划和待办事项。

418
00:15:21,440 --> 00:15:25,040
之前谈过这一点，

419
00:15:23,360 --> 00:15:26,800
但你能做的最好的事情之一是，

420
00:15:25,040 --> 00:15:28,160
当你打开 Cloud Code 时，不要

421
00:15:26,800 --> 00:15:30,800
说“嘿，我需要你修复这个

422
00:15:28,160 --> 00:15:32,880
错误”，你可以说“嘿，我遇到了这个

423
00:15:30,800 --> 00:15:34,560
错误。你能搜索一下，找出

424
00:15:32,880 --> 00:15:36,399
导致它的原因，然后告诉我

425
00:15:34,560 --> 00:15:38,399
一个修复计划吗？”

426
00:15:36,399 --> 00:15:40,639
这可以为您节省大量时间，因为

427
00:15:38,399 --> 00:15:42,399
您可以验证，您可以阅读克劳德的

428
00:15:40,639 --> 00:15:44,720
计划，您可以验证它将

429
00:15:42,399 --> 00:15:46,959
要做什么。 我们还有另一项功能，那

430
00:15:44,720 --> 00:15:49,279
就是待办事项列表功能。

431
00:15:46,959 --> 00:15:52,079
因此，当 Claude 处理一项大

432
00:15:49,279 --> 00:15:53,920
任务时，它常常会创建一个待办事项列表。 如果

433
00:15:52,079 --> 00:15:55,839
你留心观察，可以

434
00:15:53,920 --> 00:15:57,360
看一下这个待办事项清单，如果

435
00:15:55,839 --> 00:15:58,560
你发现里面有什么奇怪的东西

436
00:15:57,360 --> 00:16:00,320
或者没有

437
00:15:58,560 --> 00:16:01,839
意义的东西，那么你可以按下 Esc 键

438
00:16:00,320 --> 00:16:03,279
，说：“嘿，克劳德，我们来修改一下

439
00:16:01,839 --> 00:16:07,120
待办事项清单吧。我觉得你走错

440
00:16:03,279 --> 00:16:08,959
路了。” 智能氛围编码。 因此，

441
00:16:07,120 --> 00:16:10,959

442
00:16:08,959 --> 00:16:13,040
让克劳德工作并按下回车键，看看

443
00:16:10,959 --> 00:16:14,639
最后会发生什么，这非常诱人，而且效果非常好。 我认为有

444
00:16:13,040 --> 00:16:16,399
一些事情可以帮助改善这种情况

445
00:16:14,639 --> 00:16:19,600
。 我认为

446
00:16:16,399 --> 00:16:21,839
今天晚些时候我们会就此进行 30 分钟的讨论。

447
00:16:19,600 --> 00:16:23,839
但是做一些事情，比如进行测试驱动

448
00:16:21,839 --> 00:16:25,839
开发，让 Claude 做一些小的

449
00:16:23,839 --> 00:16:28,160
改变，运行测试，确保它们

450
00:16:25,839 --> 00:16:29,680
通过，总是让 Claude 做一些事情，

451
00:16:28,160 --> 00:16:32,320
比如检查 TypeScript 和

452
00:16:29,680 --> 00:16:33,759
linting，然后定期提交，

453
00:16:32,320 --> 00:16:35,600
这样如果它有点偏离

454
00:16:33,759 --> 00:16:38,880
轨道，你随时可以回退并再试

455
00:16:35,600 --> 00:16:41,279
一次。 您可以使用屏幕截图来指导

456
00:16:38,880 --> 00:16:43,759
和调试。 因此，Claude 是建立在

457
00:16:41,279 --> 00:16:45,600
我们的多模式模型之上的。 您可以

458
00:16:43,759 --> 00:16:47,600
随时截取屏幕截图，粘贴

459
00:16:45,600 --> 00:16:49,040
进去，或者如果您在某个地方有一个

460
00:16:47,600 --> 00:16:51,759
图像文件，您可以说，“嘿，

461
00:16:49,040 --> 00:16:53,519
克劳德，看看这个 mock.png，

462
00:16:51,759 --> 00:16:55,519
然后为我建立网站或

463
00:16:53,519 --> 00:16:57,600
其他什么。”

464
00:16:55,519 --> 00:16:59,680
然后是先进的技术。 那么，当

465
00:16:57,600 --> 00:17:02,240
您习惯使用 Claude 时，

466
00:16:59,680 --> 00:17:03,759
您可以考虑哪些事情来将

467
00:17:02,240 --> 00:17:06,319
事情推向新的

468
00:17:03,759 --> 00:17:08,319
高度？ 我们在

469
00:17:06,319 --> 00:17:09,839
内部和客户中看到的一件事是，当

470
00:17:08,319 --> 00:17:12,720
你开始使用这个工具一段

471
00:17:09,839 --> 00:17:15,280
时间后，

472
00:17:12,720 --> 00:17:16,959
同时使用多个云会非常诱人。 因此，我

473
00:17:15,280 --> 00:17:18,959
认识 Anthropic 的员工和一些

474
00:17:16,959 --> 00:17:20,799
同时运行四种云的客户

475
00:17:18,959 --> 00:17:23,280
。 有多种方法可以做到

476
00:17:20,799 --> 00:17:25,439
这一点。 您可以在 T-Mox 或

477
00:17:23,280 --> 00:17:28,160
不同的标签中使用它，各种疯狂的

478
00:17:25,439 --> 00:17:30,000
东西。 因此，我向你提出挑战，尝试

479
00:17:28,160 --> 00:17:32,160
同时运营多个俱乐部，

480
00:17:30,000 --> 00:17:33,919
并协调所有这些

481
00:17:32,160 --> 00:17:37,440
事情。 相当好玩。 我只能做

482
00:17:33,919 --> 00:17:40,480
两个，但我知道有人可以做四个。 使用

483
00:17:37,440 --> 00:17:42,960
逃脱。 所以，逃避是你最好的朋友。

484
00:17:40,480 --> 00:17:44,799
当克劳德工作时，你可以

485
00:17:42,960 --> 00:17:46,880
留意它正在做什么，你

486
00:17:44,799 --> 00:17:48,640
可以按下退出键来停止它并

487
00:17:46,880 --> 00:17:50,240
插话道：“嘿，我觉得你

488
00:17:48,640 --> 00:17:52,480
走错了路，或者我希望你

489
00:17:50,240 --> 00:17:54,320
做点别的事情。” 知道何时

490
00:17:52,480 --> 00:17:56,480
按下 Esc 键是正确的，而不是

491
00:17:54,320 --> 00:17:58,720
仅仅让 Claude 弄清楚，这是

492
00:17:56,480 --> 00:18:00,480
充分利用该工具的关键。

493
00:17:58,720 --> 00:18:01,760
还有一个隐藏功能。

494
00:18:00,480 --> 00:18:03,840
知道这一点的人并不多，但如果你按

495
00:18:01,760 --> 00:18:05,760
两次 Esc 键，你实际上可以

496
00:18:03,840 --> 00:18:09,600
跳回到你的对话中。 您可以

497
00:18:05,760 --> 00:18:12,080
返回并重置

498
00:18:09,600 --> 00:18:13,760
MCP 中的工具扩展。 因此，这将把

499
00:18:12,080 --> 00:18:16,240
它提升到一个新的水平。 如果您觉得

500
00:18:13,760 --> 00:18:18,160
使用 bash 和

501
00:18:16,240 --> 00:18:19,919
云所拥有的工具仍然无法完成

502
00:18:18,160 --> 00:18:22,559
某些事情，那么您应该开始

503
00:18:19,919 --> 00:18:24,000
考虑 MCP 服务器。

504
00:18:22,559 --> 00:18:25,280
然后是无头自动化。 我

505
00:18:24,000 --> 00:18:27,760
认为这是我们最

506
00:18:25,280 --> 00:18:29,120
兴奋的事情，但我们仍然在

507
00:18:27,760 --> 00:18:31,679

508
00:18:29,120 --> 00:18:34,000
内部努力思考如何以

509
00:18:31,679 --> 00:18:36,240
编程方式使用 Claude。 我们在 GitHub 操作中拥有它

510
00:18:34,000 --> 00:18:38,799
。 我们想找出

511
00:18:36,240 --> 00:18:41,440
其他可以开始使用它的有创意的地方

512
00:18:38,799 --> 00:18:43,440
。 我鼓励大家也

513
00:18:41,440 --> 00:18:46,320
这样做。

514
00:18:43,440 --> 00:18:48,480
所以，话虽如此，呃，我要跳到

515
00:18:46,320 --> 00:18:50,480
我的电脑前，因为还有

516
00:18:48,480 --> 00:18:53,440
另一个最佳做法，

517
00:18:50,480 --> 00:18:55,039
那就是随时掌握

518
00:18:53,440 --> 00:18:57,120
所有新事物总是好的。 因此，我们的

519
00:18:55,039 --> 00:18:58,559
发货速度非常快。 我要抛出

520
00:18:57,120 --> 00:19:01,120
我只是想回顾一下

521
00:18:58,559 --> 00:19:03,600
今天的一些新事物。

522
00:19:01,120 --> 00:19:04,960
嗯，有一件事是，当你在 Cloud

523
00:19:03,600 --> 00:19:07,200
Now 中并启动它时，你可以做

524
00:19:04,960 --> 00:19:09,200
slashmodel。 您可以看到

525
00:19:07,200 --> 00:19:11,039
您正在运行的模型。 我采用默认设置，

526
00:19:09,200 --> 00:19:13,280
恰好是 Sonnet。 我们可以跳转

527
00:19:11,039 --> 00:19:15,120
到 Opus。 您可以在 slashconfig 中执行相同的操作

528
00:19:13,280 --> 00:19:18,480
。

529
00:19:15,120 --> 00:19:20,160
在这里切换。

530
00:19:18,480 --> 00:19:22,640
这是新的。 确保您正在运行

531
00:19:20,160 --> 00:19:24,320
适合您的模型。

532
00:19:22,640 --> 00:19:26,640
这些模型还有另一个新颖之处，

533
00:19:24,320 --> 00:19:29,360
那就是你可以说类似“

534
00:19:26,640 --> 00:19:30,640

535
00:19:29,360 --> 00:19:32,559
你能弄清楚这个项目里有什么吗

536
00:19:30,640 --> 00:19:35,039
？”这样的话。 很长一段时间以来，

537
00:19:32,559 --> 00:19:38,480
我们都在进行这样的认真思考或

538
00:19:35,039 --> 00:19:40,799
深入思考。 现在这很棒，但是

539
00:19:38,480 --> 00:19:42,880
对于我们过去的模型，我们不会让

540
00:19:40,799 --> 00:19:44,000
模型在工具调用之间思考，而

541
00:19:42,880 --> 00:19:46,720
这可能是思考

542
00:19:44,000 --> 00:19:48,559
最重要的时候。 因此从云 4 开始，

543
00:19:46,720 --> 00:19:50,480
他们现在可以让我们的模型在

544
00:19:48,559 --> 00:19:51,840
工具调用之间进行思考，我们可以观察到这种

545
00:19:50,480 --> 00:19:53,520
情况的发生。 所以我们让克劳德参与这个

546
00:19:51,840 --> 00:19:54,880
项目。 这里有几个不同的文件，

547
00:19:53,520 --> 00:19:57,120
我只是要告诉它

548
00:19:54,880 --> 00:19:59,679
认真思考并弄清楚这个项目里有什么，

549
00:19:57,120 --> 00:20:01,600
然后我们就可以看到克劳德开始

550
00:19:59,679 --> 00:20:03,360
工作了。 因此，您知道自己

551
00:20:01,600 --> 00:20:06,080
触发了思考的方式是您会看到

552
00:20:03,360 --> 00:20:08,080
这种浅灰色文本，然后它会

553
00:20:06,080 --> 00:20:09,919
调用一些文件，它会调用一些工具，

554
00:20:08,080 --> 00:20:13,120
它会读取一些东西，然后我们会看到

555
00:20:09,919 --> 00:20:14,640
更多的思考。 这真是太棒了。

556
00:20:13,120 --> 00:20:16,799
嗯，所以我鼓励你在

557
00:20:14,640 --> 00:20:19,679
处理任务和解决错误时认真

558
00:20:16,799 --> 00:20:21,840
思考。

559
00:20:19,679 --> 00:20:24,799
然后另一件事，你知道

560
00:20:21,840 --> 00:20:27,360
吗，我们会很快把它抛出来，

561
00:20:24,799 --> 00:20:29,520
我在 VS Code 中有这个，但当然

562
00:20:27,360 --> 00:20:31,919
这也在 Jet Brains 中，但我们

563
00:20:29,520 --> 00:20:34,880
与 VS Code 和 Jet Brains 有这些新的出色集成

564
00:20:31,919 --> 00:20:36,480
。 嗯，我们可以

565
00:20:34,880 --> 00:20:41,640
做一些事情，比如克劳德会知道

566
00:20:36,480 --> 00:20:41,640
我在哪个文件中。我在哪个文件中？

567
00:20:41,919 --> 00:20:46,080
这不是我想说的，但

568
00:20:43,440 --> 00:20:50,360
克劳德会弄清楚的。

569
00:20:46,080 --> 00:20:50,360
你可以做这样的事情。

570
00:20:58,320 --> 00:21:02,240
所以我会

571
00:21:00,000 --> 00:21:05,520
鼓励你们关注这些事情。 我们在 Enthropic 下有

572
00:21:02,240 --> 00:21:07,840
一个公共的 GitHub 项目，

573
00:21:05,520 --> 00:21:09,679
称为 Claude Code。 您

574
00:21:07,840 --> 00:21:12,080
可以在那里发布问题，但我们也会

575
00:21:09,679 --> 00:21:13,840
在那里发布我们的变更日志。 因此，我

576
00:21:12,080 --> 00:21:15,120
每周检查一次，确保我

577
00:21:13,840 --> 00:21:16,880
掌握我们运送的所有新货物，

578
00:21:15,120 --> 00:21:19,440
因为即使是我也

579
00:21:16,880 --> 00:21:21,360
跟不上。 话虽如此，我们还

580
00:21:19,440 --> 00:21:23,039
剩下大约四分钟。 我很乐意

581
00:21:21,360 --> 00:21:24,960
回答有关云代码的任何问题

582
00:21:23,039 --> 00:21:26,320
。 我们这里有。

583
00:21:24,960 --> 00:21:32,200
如果您有兴趣，我可以现场演示一些东西

584
00:21:26,320 --> 00:21:32,200
。 嗯，我们来做一些吧。

585
00:21:33,280 --> 00:21:38,400
谢谢。 很快，这可能很

586
00:21:34,640 --> 00:21:41,039
明显，但一个项目中有多个云 MD 文件

587
00:21:38,400 --> 00:21:43,200
。 我认为这是可能的，

588
00:21:41,039 --> 00:21:45,679
它只是解决了这个问题，还是没有？ 因此，

589
00:21:43,200 --> 00:21:49,600
当然，有几个选项，就像

590
00:21:45,679 --> 00:21:51,760
在同一个目录中一样。 你不能，

591
00:21:49,600 --> 00:21:54,960
 

592
00:21:51,760 --> 00:21:56,880
但是你可以在这里

593
00:21:54,960 --> 00:21:59,120
和子目录中各有一个。 我认为

594
00:21:56,880 --> 00:22:01,039
我们改变了这一点，以便所有的

595
00:21:59,120 --> 00:22:03,360
子目录都不会被读取，因为

596
00:22:01,039 --> 00:22:04,960
像 Anthropic 一样，我们有一个 monor repo，

597
00:22:03,360 --> 00:22:07,919
人们会在顶部打开它，并

598
00:22:04,960 --> 00:22:10,240
用所有的 claud MD 炸毁他们的上下文。

599
00:22:07,919 --> 00:22:12,000
因此，我们鼓励 Claude 在

600
00:22:10,240 --> 00:22:15,520
搜索时发现

601
00:22:12,000 --> 00:22:17,360

602
00:22:15,520 --> 00:22:20,159
相关的 um 子目录中的 claw.md 文件，并确保阅读

603
00:22:17,360 --> 00:22:22,080
它们。 但默认情况下，启动时它只会读取

604
00:22:20,159 --> 00:22:24,080
当前工作目录中的云 MD 文件

605
00:22:22,080 --> 00:22:25,919
。 然后

606
00:22:24,080 --> 00:22:28,320
您还可以在主目录中设置一个

607
00:22:25,919 --> 00:22:30,559
。 嗯，不过你可以

608
00:22:28,320 --> 00:22:32,240
做一些事情。 我们有这个新东西，就像

609
00:22:30,559 --> 00:22:35,039
在您的云 MD 中您可以开始

610
00:22:32,240 --> 00:22:37,919
引用其他文件。

611
00:22:35,039 --> 00:22:40,640
因此，例如，

612
00:22:37,919 --> 00:22:42,320

613
00:22:40,640 --> 00:22:43,840
如果您有其他云 MD 文件，并且

614
00:22:42,320 --> 00:22:48,559
您知道您总是想

615
00:22:43,840 --> 00:22:52,480
读取它们，那么您可以使用 @ 符号执行类似的操作。

616
00:22:48,559 --> 00:22:55,120
你好。 好的。 我还没有运气让

617
00:22:52,480 --> 00:22:57,200
克劳德尊重我的克劳德 MD。 好像

618
00:22:55,120 --> 00:22:58,880
有一件特别的事。 是的。

619
00:22:57,200 --> 00:23:00,400
我会要求它重构某些东西，

620
00:22:58,880 --> 00:23:02,799
然后它会留下内联注释来

621
00:23:00,400 --> 00:23:04,080
解释它是什么，

622
00:23:02,799 --> 00:23:05,440
这就像一些

623
00:23:04,080 --> 00:23:07,039
非常明显的东西，

624
00:23:05,440 --> 00:23:09,120
所以我会告诉它去删除

625
00:23:07,039 --> 00:23:10,480
任何描述

626
00:23:09,120 --> 00:23:11,760
发生了什么的内联注释，

627
00:23:10,480 --> 00:23:13,520
然后它会删除它，然后

628
00:23:11,760 --> 00:23:15,120
立即再次执行并像

629
00:23:13,520 --> 00:23:16,240
同样的过程。 那么您有什么策略

630
00:23:15,120 --> 00:23:18,799
来应对这个问题吗？

631
00:23:16,240 --> 00:23:20,400
有两种方法可以解决

632
00:23:18,799 --> 00:23:21,919
这个问题。 所以这实际上是一种

633
00:23:20,400 --> 00:23:23,600
模型问题。 提示中没有任何内容

634
00:23:21,919 --> 00:23:26,640
。 实际上，在 37 号提示中我们有很多内容

635
00:23:23,600 --> 00:23:28,320
说“哇，不要

636
00:23:26,640 --> 00:23:30,320
留下评论”。 尽管如此，这位

637
00:23:28,320 --> 00:23:31,520
模特还是喜欢留下评论。 嗯，

638
00:23:30,320 --> 00:23:33,360
所以，您的

639
00:23:31,520 --> 00:23:35,039
云 MD 也没有提供太多帮助，这并不让我感到惊讶。 我们

640
00:23:33,360 --> 00:23:37,520
已经做了很多，我做了很多工作，

641
00:23:35,039 --> 00:23:41,280
试图抑制

642
00:23:37,520 --> 00:23:44,080
开箱即用的情况。 因此我们在 Cloud 4 中基本解决了这个问题。

643
00:23:41,280 --> 00:23:45,919
现在可能会出现一些新的

644
00:23:44,080 --> 00:23:47,679
奇怪的行为怪癖，但

645
00:23:45,919 --> 00:23:49,600
我们在 Cloud 4 中做得更好的另一件事是它

646
00:23:47,679 --> 00:23:51,200
更善于遵循指令。

647
00:23:49,600 --> 00:23:53,760
嗯，我们

648
00:23:51,200 --> 00:23:56,000
从早期测试人员那里得到了很多反馈，呃，突然之间

649
00:23:53,760 --> 00:23:58,640
，哇，我的云 MD 受到了

650
00:23:56,000 --> 00:23:59,840
更密切的关注。 嗯，这

651
00:23:58,640 --> 00:24:02,159
可能是一个很好的机会去看看

652
00:23:59,840 --> 00:24:04,240
你的 CloudMD 并决定我是否仍然需要

653
00:24:02,159 --> 00:24:06,320
这些东西？ 也许我可以拿出一些

654
00:24:04,240 --> 00:24:08,400
。 也许我需要添加一些新的

655
00:24:06,320 --> 00:24:10,080
东西。 因此，转向新

656
00:24:08,400 --> 00:24:11,520
模型可能是

657
00:24:10,080 --> 00:24:14,960
重新审视其中内容并了解

658
00:24:11,520 --> 00:24:16,640
您需要什么以及可以使用什么的好时机。

659
00:24:14,960 --> 00:24:17,840
呃，顺便说一下，我正在尝试思考一些

660
00:24:16,640 --> 00:24:20,159
你可能没有

661
00:24:17,840 --> 00:24:22,640
想到的事情。 我们正在进行多代理

662
00:24:20,159 --> 00:24:24,880
执行和并行化。 您能否

663
00:24:22,640 --> 00:24:27,039
让四个代理，比如说

664
00:24:24,880 --> 00:24:29,440
代理二和代理三使用

665
00:24:27,039 --> 00:24:31,279
来自代理一的上下文，也许代理四

666
00:24:29,440 --> 00:24:31,840
在某个时刻使用来自代理二的上下文

667
00:24:31,279 --> 00:24:32,320
。

668
00:24:31,840 --> 00:24:34,320
是的。

669
00:24:32,320 --> 00:24:37,440
嗯，是的，等等。

670
00:24:34,320 --> 00:24:38,480
这很有趣。 我们正在尝试，所以，

671
00:24:37,440 --> 00:24:39,679
就像我在开始时说的那样，

672
00:24:38,480 --> 00:24:41,600
我们正在尝试做一件简单而有效的事情

673
00:24:39,679 --> 00:24:44,480
，那就是只需一个

674
00:24:41,600 --> 00:24:46,320
擅长编码并能做所有事情的代理。 嗯，

675
00:24:44,480 --> 00:24:48,240
我想我们想弄清楚这一点。

676
00:24:46,320 --> 00:24:50,720
可能发生的情况是，如果

677
00:24:48,240 --> 00:24:52,880
你想这样做，你会要求所有

678
00:24:50,720 --> 00:24:54,799
代理写入

679
00:24:52,880 --> 00:24:56,320
共享的 markdown 文件或类似的东西，

680
00:24:54,799 --> 00:24:58,880
以便他们都可以

681
00:24:56,320 --> 00:25:01,039
签到和交流。 嗯，有时候

682
00:24:58,880 --> 00:25:02,960
我会和 cloud.md 或 claude 一起工作，

683
00:25:01,039 --> 00:25:05,039
我会说，“嘿，我需要你

684
00:25:02,960 --> 00:25:07,039

685
00:25:05,039 --> 00:25:08,400
为另一个开发人员在 ticket.md 中写一些东西，然后我会

686
00:25:07,039 --> 00:25:10,799
启动另一个云代码，我会说，

687
00:25:08,400 --> 00:25:12,400
嘿，读一下 ticket.md，就像另一个

688
00:25:10,799 --> 00:25:14,080
开发人员给你留的这张纸条一样。

689
00:25:12,400 --> 00:25:15,919
这就是你要做的事情。”

690
00:25:14,080 --> 00:25:17,840
因此，我会考虑尝试将该

691
00:25:15,919 --> 00:25:19,840
状态写入文件，然后

692
00:25:17,840 --> 00:25:22,480
依靠模型

693
00:25:19,840 --> 00:25:24,159
读取文件并理解它们的能力，

694
00:25:22,480 --> 00:25:27,120
这可能是您今天可以做的最好的事情

695
00:25:24,159 --> 00:25:30,080
。 也许我们会找到更聪明的

696
00:25:27,120 --> 00:25:32,799
方法，在产品中将其展现为

697
00:25:30,080 --> 00:25:34,960
更原生的东西。

698
00:25:32,799 --> 00:25:37,840
凉爽的。

699
00:25:34,960 --> 00:25:40,720
好的。 话虽如此，我在背包里发现了

700
00:25:37,840 --> 00:25:42,480
一些罕见的爪形代码贴纸

701
00:25:40,720 --> 00:25:43,679
。 那么，来找我吧。

702
00:25:42,480 --> 00:25:46,000
我会在那里闲逛或

703
00:25:43,679 --> 00:25:47,650
做点别的事。 嗯，很高兴与大家分享。

704
00:25:46,000 --> 00:25:53,019
谢谢。

705
00:25:47,650 --> 00:25:53,019
[掌声]

