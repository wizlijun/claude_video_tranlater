1
00:00:05,760 --> 00:00:13,440
Let's get started. Welcome everyone to Cloud 
Code best practices. In this talk, I'm going  

2
00:00:13,440 --> 00:00:19,440
to talk about kind of what cloud code is at a high 
level. Then we'll peer under the hood a little bit  

3
00:00:19,440 --> 00:00:24,720
to kind of understand how cloud code works. And 
then knowing that because it's useful to kind of  

4
00:00:24,720 --> 00:00:29,520
know how your tools work. We're going to talk 
about good use cases for cloud code and also  

5
00:00:29,520 --> 00:00:36,640
best practices we've figured out both internally 
and from our users uh for getting the most out of  

6
00:00:36,640 --> 00:00:41,520
this tool. Uh but before I get started, I'd like 
to introduce myself real quick and talk about how  

7
00:00:41,520 --> 00:00:48,080
I ended up on the stage. So, my name's Cal and 
I joined Enthropic about a year and a half ago  

8
00:00:48,080 --> 00:00:53,920
uh to help start up a team we call applied 
AI. And it's the applied AI's kind of mission,  

9
00:00:53,920 --> 00:00:58,880
our team's mission is to help our customers and 
partners build great products and features on  

10
00:00:58,880 --> 00:01:04,960
top of Claude. So what that really means is 
I spend a lot of my day prompting Claude to  

11
00:01:04,960 --> 00:01:10,640
get the absolute best outputs out of these 
models. That said, I also love to code and  

12
00:01:10,640 --> 00:01:15,200
I'm definitely one of those coders that like 
starts a lot of projects, has some crazy idea,  

13
00:01:15,200 --> 00:01:19,680
and then just never finishes them. So, I have 
this graveyard of just like code that I started,  

14
00:01:19,680 --> 00:01:24,080
never really finished. Um, but I'm always 
spinning new things up. And late last year,  

15
00:01:24,080 --> 00:01:28,160
I was in Slack and I was hearing about this new 
tool that a few people are using. They were saying  

16
00:01:28,160 --> 00:01:33,840
it was really cool. And so, on a Friday night, I 
downloaded the tool that would become Cloud Code.  

17
00:01:33,840 --> 00:01:38,800
And I threw it at this kind of new notetaking 
app that I wanted to build. And like that whole  

18
00:01:38,800 --> 00:01:44,080
weekend just kind of totally changed the way that 
I code and think about software engineering. I was  

19
00:01:44,080 --> 00:01:48,880
carrying around my laptop with me all weekend. I 
was super addicted to just watching Claude Code  

20
00:01:48,880 --> 00:01:54,880
work and I would press enter and I'd switch over 
to my browser and refresh and I watched this huge  

21
00:01:54,880 --> 00:02:00,240
powerful application come together in front of my 
eyes. And I got way farther into this thing than  

22
00:02:00,240 --> 00:02:05,520
I ever would have on my own. And it just blew my 
mind. And while I was doing this, I was a little  

23
00:02:05,520 --> 00:02:09,040
worried. I was like, you know, I you know, I kind 
of know how these things work. So I'm like, man,  

24
00:02:09,040 --> 00:02:13,760
I'm using a lot of tokens. I hope I don't get in 
trouble or anyone like notices. I'm not really  

25
00:02:13,760 --> 00:02:18,880
contributing to anthropic code. Um, but what 
I didn't know is that the claude code team had  

26
00:02:18,880 --> 00:02:24,480
built this internal like leaderboard tracking 
how much all the anthropic employees were using  

27
00:02:24,480 --> 00:02:29,840
this. And over the weekend, I had shot to the 
top. And so through that, I got to meet Boris  

28
00:02:29,840 --> 00:02:34,880
and Cat and some of the early cloud code team. 
And I was able to start talking to them and say,  

29
00:02:34,880 --> 00:02:40,800
"Hey, I love this tool. I also know a lot about 
prompting. Can I help you all out?" And so through  

30
00:02:40,800 --> 00:02:46,720
that I got involved and now I'm one of the core 
contributors on the team and I do a lot of I work  

31
00:02:46,720 --> 00:02:52,000
a lot on the prompting the system prompts how the 
tools work the tool descriptions and tool results  

32
00:02:52,000 --> 00:02:56,960
as well as I work on how we evaluate this tool. 
So when we think about changing the prompts how  

33
00:02:56,960 --> 00:03:02,880
do we make how do we know we made things better or 
the same and we didn't totally ruin cloud code. So  

34
00:03:02,880 --> 00:03:08,960
with that said let's kind of dive in. So, here's 
my current mental model of Claude Code and how I  

35
00:03:08,960 --> 00:03:16,400
describe it to people when people ask me. Claude 
Code is like that co-worker that does everything  

36
00:03:16,400 --> 00:03:21,760
on the terminal. It's the sort of person that just 
never touches the guey. They're a whiz. I think  

37
00:03:21,760 --> 00:03:26,960
of when I was a junior engineer, I had this mentor 
and I would walk over to his desk and I would say,  

38
00:03:26,960 --> 00:03:31,600
"Hey, Tony, can you help me with this bug?" and 
he would whipping it open his terminal and he'd  

39
00:03:31,600 --> 00:03:35,280
be like doing all these crazy bash commands 
and changing things around in Vim and I'd  

40
00:03:35,280 --> 00:03:41,440
always walk away thinking, "Wow, that was crazy. 
I should learn how to do that." Um, I never did.  

41
00:03:41,440 --> 00:03:49,760
But having Claude Code on your computer is kind 
of like having Tony next to you all the time.

42
00:03:49,760 --> 00:03:58,480
So, how does Claude code kind of work under the 
hood? At Anthropic, we try to always do what  

43
00:03:58,480 --> 00:04:03,920
we call the simple thing that works. And what 
that means for Cloud Code is it's what we would  

44
00:04:03,920 --> 00:04:11,440
consider a very pure agent. And anthropic, when 
we talk about agents, what we really mean is some  

45
00:04:11,440 --> 00:04:17,440
instructions, some powerful tools, and you let 
the model just run in a loop until it decides it's  

46
00:04:17,440 --> 00:04:24,720
done. And that's really what Cloud Code is. So 
it's tools, powerful tools, and the tools that you  

47
00:04:24,720 --> 00:04:28,640
know someone that was really good at a terminal 
would be able to use tools to create and edit  

48
00:04:28,640 --> 00:04:35,600
files to use the terminal. And then you can also 
do things like pull in other things with MCP. Now,  

49
00:04:35,600 --> 00:04:42,080
on top of that, there's how Claude understands 
the codebase. And if you're going to build a  

50
00:04:42,080 --> 00:04:47,840
coding agent or a coding tool a year ago, you'd 
probably have ideas like, well, okay, I'm going to  

51
00:04:47,840 --> 00:04:52,720
get this user message about something about this 
codebase and I'll need to figure out which files  

52
00:04:52,720 --> 00:04:58,160
are relevant. So maybe I'll like index the whole 
codebase and embed it and do this fancy like kind  

53
00:04:58,160 --> 00:05:04,720
of rag retrieval thing. That is not how cloud code 
works. We don't do any sort of indexing. Instead,  

54
00:05:04,720 --> 00:05:10,720
claude kind of explores and understands the 
codebase. how you if you were new to a team  

55
00:05:10,720 --> 00:05:16,080
and new to a codebase would explore a codebase 
and that is through a gentic search is the same  

56
00:05:16,080 --> 00:05:21,600
sort of search tools you or I would use things 
like glob and gp and find and it can work its way  

57
00:05:21,600 --> 00:05:27,040
through a codebase and understand what's going on 
and when we talk about a gentic search that really  

58
00:05:27,040 --> 00:05:32,720
means the model can go do some searches and then 
it can look at the results and can say hm maybe I  

59
00:05:32,720 --> 00:05:37,920
need to figure out a few more things I'm going to 
go do some more searching and then come back and  

60
00:05:37,920 --> 00:05:43,120
then on top of these primitives. On top of this 
agent, we have a few things. We have a very nice  

61
00:05:43,120 --> 00:05:48,960
light UI layer where you get to watch Claude 
code work. You see all the text fly by and we  

62
00:05:48,960 --> 00:05:54,800
have this nice permission system that allows the 
agent to work and allows and kind of forces the  

63
00:05:54,800 --> 00:06:00,160
human to butt in when the agent is doing something 
dangerous. And then on top of that, we also care a  

64
00:06:00,160 --> 00:06:06,400
lot about security in this tool. And so because 
quad code is just such a lightweight kind of  

65
00:06:06,400 --> 00:06:12,160
layer on top of the model and the fact that our 
model is available not just behind anthropic APIs  

66
00:06:12,160 --> 00:06:19,440
but also with our cloud providers AWS and GCP it's 
very easy and native to point cloud code at one of  

67
00:06:19,440 --> 00:06:27,600
these other services if you feel more comfortable 
consuming cloud that way. Now a lot of people ask  

68
00:06:27,600 --> 00:06:33,760
me hey Cal what can I use cloud code for? Like 
what is it good at? where is it interesting? And  

69
00:06:33,760 --> 00:06:42,000
the reality is it's kind of great at everything. 
So let's start with discovery. Often times in your  

70
00:06:42,000 --> 00:06:47,280
career, you will be dropped into a new codebase. 
Whether that means you're switching teams,  

71
00:06:47,280 --> 00:06:50,480
you're switching companies, I don't know, 
you're starting to work on some sort of  

72
00:06:50,480 --> 00:06:54,480
open source project. And probably when you're 
first getting started and getting familiar,  

73
00:06:54,480 --> 00:06:57,920
you're not very productive because you're just 
trying to figure out where things are in the  

74
00:06:57,920 --> 00:07:03,200
codebase, what patterns kind of the team is using, 
things like that. And Claude code can kind of help  

75
00:07:03,200 --> 00:07:09,360
supercharge that onboarding process. You can ask 
claude, hey, where is this feature implemented?  

76
00:07:09,360 --> 00:07:13,760
Or since it's great at the terminal, you can 
say, hey, look at this file and look at the git  

77
00:07:13,760 --> 00:07:19,360
history and just kind of tell me a story about how 
this code has changed over the past couple weeks.  

78
00:07:20,400 --> 00:07:25,440
One thing you can use cloud code for, and I think 
this is underrated, is instead of just diving in  

79
00:07:25,440 --> 00:07:30,160
and starting to work, you can use cloud code as a 
thought partner. So oftent times when I'm working  

80
00:07:30,160 --> 00:07:34,640
with Claude and I want to implement a feature or 
we're going to change something up, I'll open up  

81
00:07:34,640 --> 00:07:38,960
Claude and I'll say, "Hey Claude, you know, 
I'm thinking about implementing this feature,  

82
00:07:38,960 --> 00:07:43,120
can you just kind of like search around and kind 
of figure out how we would do it and maybe report  

83
00:07:43,120 --> 00:07:47,600
back with like two or three different options. 
Don't start working. don't start writing any  

84
00:07:47,600 --> 00:07:52,480
files writing any files yet and claude will go 
off and use those agentic search capabilities  

85
00:07:52,480 --> 00:07:57,920
and come back with a few ideas and then I could 
work with claude to kind of validate things and  

86
00:07:57,920 --> 00:08:04,480
then we can jump into the project of course cloud 
code is great at building and writing code and  

87
00:08:04,480 --> 00:08:09,600
I would say this in on two different fronts one 
it can do the zero to one sort of stuff you drop  

88
00:08:09,600 --> 00:08:14,800
it in an empty directory and you say hey build me 
an app build me a game that demos where very well  

89
00:08:14,800 --> 00:08:20,240
it's very fun to do it's very grat gratifying. 
Of course, in reality, what really matters is is  

90
00:08:20,240 --> 00:08:27,840
cloud code good working in existing code bases. 
And this is primarily what we focus on. Um,  

91
00:08:27,840 --> 00:08:34,800
on the cloud code team, we have in our codebase 
abnormally high, I would say, unit test coverage.  

92
00:08:34,800 --> 00:08:41,920
And that's because cloud code makes it so easy 
and just straightforward to add unit tests. So, we  

93
00:08:41,920 --> 00:08:46,000
have great code coverage. And then the other thing 
we have in cloud code in our own codebase is we  

94
00:08:46,000 --> 00:08:50,720
have great commits and PR messages because when we 
finish working we'll just say hey cloud write the  

95
00:08:50,720 --> 00:08:58,400
commit for me write the PR message for me. We also 
see great opportunities to use cloud code in kind  

96
00:08:58,400 --> 00:09:04,160
of the deployment like deployments and in other 
parts of the life cycle. And this is a few other  

97
00:09:04,160 --> 00:09:09,840
people have talked about this but this is using 
the cloud code SDK. So using it headlessly, using  

98
00:09:09,840 --> 00:09:17,280
it programmatically, being able to sprinkle in a 
coding agent agent anywhere. And so that's things  

99
00:09:17,280 --> 00:09:24,800
like sprinkling it into CI/CD to use it in GitHub 
for instance to help people um programmatically.  

100
00:09:24,800 --> 00:09:30,480
And then finally, it's great kind of with support 
and scale. It can help you debug errors faster.  

101
00:09:30,480 --> 00:09:35,520
One thing that we saw when we started giving cloud 
code to customers and talking to them about it,  

102
00:09:35,520 --> 00:09:40,000
we didn't totally predict this was a lot of 
customers or potential customers said, "Hey,  

103
00:09:40,000 --> 00:09:44,960
we've been me we've been kind of putting off this 
like large codebase migration. People that are on  

104
00:09:44,960 --> 00:09:50,480
old versions of Java trying to get to a new one 
or a team that's on PHP and they're trying to  

105
00:09:50,480 --> 00:09:56,160
get to React or Angular. We've talked to multiple 
teams like this and having a tool like Cloud Code  

106
00:09:56,160 --> 00:10:00,320
makes projects like that a little more digestible. 
when you go to your team and you say, "Hey, we're  

107
00:10:00,320 --> 00:10:07,200
going to spend a month, you know, refactoring or 
rewriting large parts of the codebase." And then  

108
00:10:07,200 --> 00:10:12,480
on top of that, and this kind of matters across 
all these, is once again remember Claude is great  

109
00:10:12,480 --> 00:10:17,280
at the terminal. And that means it's going 
to be great at all those different CLI tools,  

110
00:10:17,280 --> 00:10:22,560
things like Git, Docker, Big Query, things like 
that. I never have to worry about, oh, I'm going  

111
00:10:22,560 --> 00:10:27,840
to get myself, how do I get myself out of this 
sticky rebase? I'll just fire up cloud code and  

112
00:10:27,840 --> 00:10:34,000
tell it the situation and be like, "Hey, can you 
fix this for me?" It's incredible. Now, let's  

113
00:10:34,000 --> 00:10:41,120
talk about best practices. And the first one is 
not going to be a surprise, but the first one is  

114
00:10:41,120 --> 00:10:48,800
use claw.md files. So, remember that cloud code, 
like I said, is an agent and it has some tools,  

115
00:10:48,800 --> 00:10:54,240
has some lightweight instructions in the prompt, 
but it doesn't really have memory. And so the main  

116
00:10:54,240 --> 00:11:00,240
way we share state across kind of sessions 
or across our team when we fire up cla code  

117
00:11:00,240 --> 00:11:07,040
in the same codebase over and over again is this 
cloud.mmd file. So when we start cla what happens  

118
00:11:07,040 --> 00:11:12,080
is if there's this claw.md file in the working 
directory it's just plopped into context. It's  

119
00:11:12,080 --> 00:11:16,640
plopped into the prompt. And basically what it 
says is hey claude by the way these are important  

120
00:11:16,640 --> 00:11:22,160
instructions the developer left for you. Be 
sure to pay close attention to this. And there's  

121
00:11:22,160 --> 00:11:27,040
various places you can put the cloudmd file. You 
can put it in a project and check it in so all  

122
00:11:27,040 --> 00:11:31,040
your teammates share it. You could put one in your 
home directory if there's things you just want  

123
00:11:31,040 --> 00:11:35,600
claude to always know about regardless of what 
you're working on. And the things you put in here  

124
00:11:35,600 --> 00:11:41,440
are things like, hey, by the way, maybe this is 
how you run the unit tests. Or just so you know,  

125
00:11:41,440 --> 00:11:46,320
to make kind of your searching and life easier, 
here's like just like an overview of kind of how  

126
00:11:46,320 --> 00:11:51,280
this project is laid out, where the tests live, 
what different modules are, things like that.  

127
00:11:51,280 --> 00:11:56,720
or here's our style guide. All sorts of things 
like that to just make Claude's life a bit easier.  

128
00:11:56,720 --> 00:12:03,360
And you can build these things up over time. 
The other thing you can do, which is important,  

129
00:12:03,360 --> 00:12:07,840
is permission management. When you're running 
Cloud Code, there's all sorts of different kind  

130
00:12:07,840 --> 00:12:13,840
of permission things flying by. Kind of out of the 
box, what happens when you start our tool is for  

131
00:12:13,840 --> 00:12:20,800
read actions. If Claude is searching or reading, 
we just let it go. But once it starts writing or  

132
00:12:20,800 --> 00:12:26,400
running bash commands or doing things that could 
change change stuff on your machine potentially,  

133
00:12:26,400 --> 00:12:33,040
that's when we kick in this UI and it says 
something like yes, yes, always allow this or no,  

134
00:12:33,040 --> 00:12:38,880
um, I want to do something else. And using that 
permission management and being smart about it  

135
00:12:38,880 --> 00:12:43,520
can help you work faster. So there's something 
called autoaccept mode where if you're working  

136
00:12:43,520 --> 00:12:48,800
with cloud code and you press shift tab, claude 
will just start working. There's things you can  

137
00:12:48,800 --> 00:12:54,960
do like you can configure claude in the settings 
where specific commands like on bash like if you  

138
00:12:54,960 --> 00:13:01,360
just are like tired of saying yes run npm run test 
you can just always approve that. So fiddling with  

139
00:13:01,360 --> 00:13:08,000
your permission management is a great way to kind 
of speed up your workflow integration setup. So,  

140
00:13:08,000 --> 00:13:12,880
one thing that is going to help you get the most 
out of cloud code is remember that it's great at  

141
00:13:12,880 --> 00:13:18,480
the terminal. And if there's applications that 
you use which have kind of a way to access them  

142
00:13:18,480 --> 00:13:23,840
through CLI and GitHub is a great example of 
that. They have a powerful tool called GH you  

143
00:13:23,840 --> 00:13:29,680
can basically give more work to cloud code and 
you can do that either by just installing more  

144
00:13:29,680 --> 00:13:37,440
CLI tools or you can attach more MCP servers. Um, 
I would say just through experience that if you're  

145
00:13:37,440 --> 00:13:43,200
using something like um, a CLI tool that's well 
known and well documented and you're trying to  

146
00:13:43,200 --> 00:13:48,960
choose between the CLI tool and just installing 
it on your machine and grabbing an MCP server,  

147
00:13:48,960 --> 00:13:56,320
I would recommend using the CLI tool. Um, and 
then also if you internally have your own tools  

148
00:13:56,320 --> 00:14:01,120
at Anthropic, we have something called coup that 
does a whole bunch of stuff for us. You can also  

149
00:14:01,120 --> 00:14:07,200
tell Claude about that and you pro that's the sort 
of thing you'd put in claude.mmd and then context  

150
00:14:07,200 --> 00:14:13,440
management. So remember that claude is an agent 
and when it's an a what what it does it's calls  

151
00:14:13,440 --> 00:14:19,360
these tools and the context builds up and up over 
time and at least for anthropic our models have a  

152
00:14:19,360 --> 00:14:24,960
context window of 200,000 tokens and you can max 
this thing out. So you kind of have two options  

153
00:14:24,960 --> 00:14:29,440
when you're in a long session with claude and 
you're working and you're going back and forth.  

154
00:14:29,440 --> 00:14:33,280
You'll see in the bottom right you'll start to 
get this little warning that'll say hey you're  

155
00:14:33,280 --> 00:14:38,000
starting to fill up the context window and kind of 
depending on what's going on you have two options.  

156
00:14:38,000 --> 00:14:43,120
You can run slashcle and just start over and that 
clears everything out except for for instance  

157
00:14:43,120 --> 00:14:50,480
claw.mmd or you can run slash compact and what'll 
happen is basically it's like a user message is  

158
00:14:50,480 --> 00:14:55,120
inserted and it just says something like hey 
I need to go summarize everything we've been  

159
00:14:55,120 --> 00:14:59,520
up to. I'm going to give this to another developer 
and they're going to pick up where I left off. And  

160
00:14:59,520 --> 00:15:04,240
then that summary is what kind of seeds the next 
session. You can go from there. We spend a lot of  

161
00:15:04,240 --> 00:15:09,440
time tuning this kind of compact functionality 
so that as you max out the context window and  

162
00:15:09,440 --> 00:15:16,480
then run compact, you can start back over and 
keep going efficient workflows. What can you do  

163
00:15:16,480 --> 00:15:22,320
with cloud code? And how do you get the most out? 
So using planning and to-dos. talked a little bit  

164
00:15:22,320 --> 00:15:26,800
about this before, but one of the best things you 
can do is when you open up Cloud Code, instead of  

165
00:15:26,800 --> 00:15:32,480
saying, "Hey, I need you to fix this bug," you can 
say, "Hey, I have this bug. Can you search around,  

166
00:15:32,480 --> 00:15:36,880
figure out what's causing it, and just like tell 
me a plan how we're going to fix it?" And this can  

167
00:15:36,880 --> 00:15:41,760
save you a lot of time because you can verify, 
you can read Claude's plan, and you can verify  

168
00:15:41,760 --> 00:15:46,960
what it's going to do. And then the other thing 
that we have is we have this to-do list feature.  

169
00:15:46,960 --> 00:15:52,560
So often when Claude's working on a big task, 
it'll create a to-do list. And if you're kind of  

170
00:15:52,560 --> 00:15:57,360
paying attention, you can kind of watch this to-do 
list, and if you see anything kind of weirder in  

171
00:15:57,360 --> 00:16:01,280
there or something that doesn't make sense, that's 
when you can press escape and say, "Hey Claude,  

172
00:16:01,280 --> 00:16:06,800
let's change the to-do list. I think you're 
on the wrong path." Smart vibe coding. So it's  

173
00:16:06,800 --> 00:16:11,520
very tempting and it's very powerful to just let 
Claude work and press enter and see what happens  

174
00:16:11,520 --> 00:16:16,080
at the end. I think there's a few things that can 
help make this better. And there's I think a talk  

175
00:16:16,080 --> 00:16:22,480
later today about just this for 30 minutes. But 
doing things like having test-driven development,  

176
00:16:22,480 --> 00:16:28,000
having Claude make small changes, run the tests, 
make sure they pass, always having Claude do  

177
00:16:28,000 --> 00:16:33,200
things like check the TypeScript and the linting, 
and then commit regularly so that if it's kind of  

178
00:16:33,200 --> 00:16:39,120
going off the rails, you can always fall back and 
try again. You can use screenshots to guide and  

179
00:16:39,120 --> 00:16:44,400
debug. So Claude is built on top of our models 
which are multimodal. You can always just grab  

180
00:16:44,400 --> 00:16:49,040
a screenshot, paste it in, or if you have a file 
somewhere that's an image, you can just say, "Hey,  

181
00:16:49,040 --> 00:16:56,560
Claude, look at this mock.png and then build the 
website for me or whatever." And then advanced  

182
00:16:56,560 --> 00:17:02,240
techniques. So, as you're getting used to using 
Claude, what are some things you can think about  

183
00:17:02,240 --> 00:17:07,360
uh to kind of push things to the next level? And 
one of the things we see both internally and with  

184
00:17:07,360 --> 00:17:12,960
customers is when you've started to use this tool 
for a while, it's going to be very tempting to use  

185
00:17:12,960 --> 00:17:18,640
multiple clouds at once. And so I know people at 
Anthropic and a few customers that run four clouds  

186
00:17:18,640 --> 00:17:24,560
at the same time. There's various ways to do this. 
You can have it in T-Mox or just different tabs,  

187
00:17:24,560 --> 00:17:30,000
all sorts of crazy things. So I would challenge 
you to try getting multiple clubs running at once  

188
00:17:30,000 --> 00:17:35,120
and kind of be orchestrating all these things. 
It's quite fun. I can only do two, but I know  

189
00:17:35,120 --> 00:17:42,240
people that do four. Use escape. So, escape 
is your best friend. While Claude is working,  

190
00:17:42,240 --> 00:17:47,360
you can kind of keep an eye on what it's up to, 
and you can press escape to stop it and interject  

191
00:17:47,360 --> 00:17:52,000
and say, "Hey, I think you're going on the wrong 
path, or I want you to do something else." Knowing  

192
00:17:52,000 --> 00:17:56,960
when the right time to press escape is versus 
just letting Claude figure it out, is key to  

193
00:17:56,960 --> 00:18:01,280
getting the most out of the tool. And there's a 
hidden feature. Not too many people know about it,  

194
00:18:01,280 --> 00:18:06,080
but if you press escape twice, you can actually 
jump back in your conversation. You can go back  

195
00:18:06,080 --> 00:18:13,520
and you can kind of reset tool expansion in MCP. 
So, this is taking it to the next level. If you  

196
00:18:13,520 --> 00:18:19,200
feel like with bash and with the tools that cloud 
has that it still can't do something, this is  

197
00:18:19,200 --> 00:18:24,560
when you should start looking at MCP servers. And 
then headless automation. And I think this is the  

198
00:18:24,560 --> 00:18:30,000
thing we're most excited about, but also we are 
still trying to wrap our heads around internally,  

199
00:18:30,000 --> 00:18:35,920
which is how can we use Claude programmatically. 
We have that in GitHub actions. We want to figure  

200
00:18:35,920 --> 00:18:42,560
out other creative places we can start using 
it. I would challenge you all to do the same.  

201
00:18:43,440 --> 00:18:48,960
So, with that said, uh I'm going to jump over 
to my computer because there's one other best  

202
00:18:48,960 --> 00:18:55,440
practice, which is it's always good to stay on 
top of everything that's new. So, we're shipping  

203
00:18:55,440 --> 00:19:01,680
super fast. I'm going to throw I'm just going to 
go over a few things that are new as of today. Um,  

204
00:19:01,680 --> 00:19:06,880
one thing is when you're in Cloud Now and you fire 
it up, you can do slashmodel. You can see what  

205
00:19:06,880 --> 00:19:12,080
model you're running on. I'm on default, which 
happens to be Sonnet. We can jump over to Opus.  

206
00:19:12,080 --> 00:19:20,160
You can do the same thing in slashconfig. Switch 
it here. So that's new. Make sure you're running  

207
00:19:20,160 --> 00:19:25,600
the model that works for you. There's another 
thing that's new about these models which is  

208
00:19:25,600 --> 00:19:32,320
you can say something like um can you figure out 
what's in this project? And for a long time for a  

209
00:19:32,320 --> 00:19:39,200
while we've had this like think hard or extended 
thinking. Now this is great but with our past  

210
00:19:39,200 --> 00:19:44,000
models the we wouldn't let our model think between 
tool calls and that's probably when the thinking  

211
00:19:44,000 --> 00:19:49,680
matters most. So starting with cloud 4 they can 
now our models now think between tool calls and  

212
00:19:49,680 --> 00:19:53,680
we can watch this happen. So we have Claude in 
this project. There's a few different files in  

213
00:19:53,680 --> 00:19:58,640
here and I'm just going to tell it to think hard 
and figure out what's in this project and we can  

214
00:19:58,640 --> 00:20:03,200
watch Claude start to work. And so the way you 
know you triggered thinking is you'll see kind  

215
00:20:03,200 --> 00:20:08,480
of this lighter gray text and then it'll call 
some file, it'll call some tools, it'll read  

216
00:20:08,480 --> 00:20:14,480
some stuff, and then we see some more thinking. 
And this is awesome. Um, so I encourage you when  

217
00:20:14,480 --> 00:20:20,880
you're working on tasks and solving bugs, throw 
a think hard in there. And then the other thing,  

218
00:20:20,880 --> 00:20:27,360
and you know what, we'll just throw it up real 
quick, is I have this in VS Code, but of course  

219
00:20:27,360 --> 00:20:33,440
this is in Jet Brains as well, but we have these 
new great integrations with VS Code and and Jet  

220
00:20:33,440 --> 00:20:41,920
Brains. Um, we can do things like Claude's going 
to know what file I'm in. What file am I in?

221
00:20:41,920 --> 00:20:43,200
That is not what I meant to say,  

222
00:20:43,200 --> 00:20:48,480
but Claude's going to figure it out. 
And you can do things like this.

223
00:20:58,320 --> 00:21:03,600
So these are the sort of things I would 
encourage you to stay on top of. We have a public  

224
00:21:03,600 --> 00:21:08,800
uh kind of GitHub project called Claude Code 
under Enthropic. You can post issues there,  

225
00:21:08,800 --> 00:21:14,000
but we also post our change log there. And so I 
check this once a week and make sure that I'm on  

226
00:21:14,000 --> 00:21:19,120
top of all the new stuff we're shipping because 
even I can't keep up with it. So, with that said,  

227
00:21:19,120 --> 00:21:23,280
we have like four minutes left. I'm happy to 
answer questions about anything cloud code  

228
00:21:23,280 --> 00:21:33,280
related. We have it here. I can live demo some 
stuff if you're interested. Um, let's do a few.

229
00:21:33,280 --> 00:21:40,160
Thanks. Real quick, this might be obvious, but 
multiple cloud MD files in a project. I presume  

230
00:21:40,160 --> 00:21:46,160
that's possible and it just figures it out or no? 
So, there's a few options, of course, like in the  

231
00:21:46,160 --> 00:21:57,200
same directory. You couldn't um but you could have 
one here and one in a subdirectory. And I think we  

232
00:21:57,200 --> 00:22:02,080
changed this so that all the subdirectory ones 
aren't read in because like Anthropic, we have a  

233
00:22:02,080 --> 00:22:08,160
monor repo and people would open it at the top and 
blow up their context with all the claud MDs. So,  

234
00:22:08,160 --> 00:22:15,520
we encourage Claude when it's searching around and 
it discovers claw.md files in um child directories  

235
00:22:15,520 --> 00:22:21,520
that are relevant to be sure to read them. But by 
default, it just reads the cloud MD file in the  

236
00:22:21,520 --> 00:22:25,920
current working directory when you fire it up. 
And then also you can set one in like your home  

237
00:22:25,920 --> 00:22:31,840
directory. Um there are things you can do though. 
We have this new thing like in your cloud MD you  

238
00:22:31,840 --> 00:22:39,040
can start referencing other files. So you could 
for instance um do something like this with an  

239
00:22:39,040 --> 00:22:45,200
at sign um if you have other cloud MD files that 
you just kind of know you always want to read in  

240
00:22:45,200 --> 00:22:54,080
um to do something like that. Hi. Okay. I um have 
not had luck getting Claude to respect my Claude  

241
00:22:54,080 --> 00:22:59,200
MD. Like there's one thing particular. Yes. where 
I'll ask it to refactor something and then it  

242
00:22:59,200 --> 00:23:04,080
will leave inline comments explaining the like the 
what of it is and it's like like something that's  

243
00:23:04,080 --> 00:23:09,760
extremely obvious and so I'll tell it like go and 
remove any inline comments that describe the what  

244
00:23:09,760 --> 00:23:13,680
of what's happening and then it will remove it 
and then immediately do it again and like the same  

245
00:23:13,680 --> 00:23:18,560
pass. So do you have any strategies for dealing 
with that? So there's kind of two things that  

246
00:23:18,560 --> 00:23:22,720
fix that. So that was actually kind of a model 
problem. There's nothing in the prompt. We have  

247
00:23:22,720 --> 00:23:28,080
actually a lot in the prompt for 37 that said, 
"Whoa, do not leave comments." And despite that,  

248
00:23:28,080 --> 00:23:32,480
the model just loves to leave comments. Um, so it 
doesn't surprise me that your cloud MD didn't help  

249
00:23:32,480 --> 00:23:37,680
much either. We already did a lot I did a lot of 
work to try to tamp it down from what happens out  

250
00:23:37,680 --> 00:23:45,360
of the box. So we mostly fixed that in Cloud 4. 
Now there might be some new weird behavior quirks,  

251
00:23:45,360 --> 00:23:49,600
but the other thing we made better in Cloud 4 
is it's just better at following instructions.  

252
00:23:49,600 --> 00:23:54,720
Um, and we've gotten a lot of feedback from 
early testers that, uh, all of a sudden, whoa,  

253
00:23:54,720 --> 00:23:59,840
my cloud MD is being followed way more closely. 
Um, and it might be a good chance to go look in  

254
00:23:59,840 --> 00:24:05,120
your CloudMD and decide, do I still need this 
stuff? Maybe I can take some of it out. Maybe  

255
00:24:05,120 --> 00:24:09,360
I need to add a few new things. So, moving 
over to the new models might be a good time  

256
00:24:09,360 --> 00:24:15,200
to take another look at what's in there and 
see what you need and what maybe can go. Uh,  

257
00:24:15,200 --> 00:24:19,200
for the record, I'm trying to think of something 
that you might not have thought of. We're doing  

258
00:24:19,200 --> 00:24:24,240
multi- aent execution and parallelization. 
Can you make it so that for four agents,  

259
00:24:24,240 --> 00:24:30,160
say agents two and three use the context from 
agent one, maybe agent four uses the context from  

260
00:24:30,160 --> 00:24:37,440
agent two at a certain point. Yeah. Um yeah, 
etc. That's interesting. We're trying to So,  

261
00:24:37,440 --> 00:24:39,920
kind of like I said at the beginning, we're 
trying to do the simple thing that works,  

262
00:24:39,920 --> 00:24:45,760
which is just one agent that's great at coding 
and does everything. Um I think we want to figure  

263
00:24:45,760 --> 00:24:50,880
that out. Probably what's going to happen is if 
you wanted to do that, you would ask all your  

264
00:24:50,880 --> 00:24:55,760
agents to probably like write to a shared markdown 
file or something like that so they can all kind  

265
00:24:55,760 --> 00:25:01,200
of like check in and communicate. Um, sometimes 
like I'll be working with cloud.md or claude and  

266
00:25:01,200 --> 00:25:06,400
I'll just say like, "Hey, I need you to write some 
stuff in like ticket.md for another developer and  

267
00:25:06,400 --> 00:25:11,280
then I'll fire up another cloud code and I'll be 
like, hey, read ticket.md like another developer  

268
00:25:11,280 --> 00:25:15,520
left this note for you. Like this is what you're 
going to work on." So, I would think about trying  

269
00:25:15,520 --> 00:25:20,240
to write that state to a file and then just kind 
of like count on the model's ability to just like  

270
00:25:20,240 --> 00:25:26,720
read files and make sense them um is probably the 
best you can do today. And maybe we'll figure out  

271
00:25:26,720 --> 00:25:36,960
clever ways to expose that uh in the product as 
something more native. Cool. All right. And with  

272
00:25:36,960 --> 00:25:42,480
that said, I have some rare clawed code stickers 
that I found in my backpack. So, come find me.  

273
00:25:42,480 --> 00:25:49,941
I'll be hanging out over there or something. 
Um, happy to share them. Thank you. [Applause]

